name: Build Android Kernel
on:
 workflow_dispatch:
  inputs:
   kernel_url:
    description: 'Kernel URL'
    required: true
    default: 'https://github.com/ben443/android_kernel_samsung_gts8.git'
    type: string
   branch:
    description: 'Branch'
    required: true
    default: master
    type: string
   config:
    description: 'Device defconfig'
    required: true
    default: 'nethunter_defconfig'
    type: string
   boot_format:
    description: 'Boot format'
    required: true
    default: 'Image'
    type: string
   gcc_var:
    description: 'GCC version'
    required: true
    default: 'AOSP GCC'
    type: choice
    options:
    - AOSP GCC
    - Eva GCC
   clang_ver:
    description: 'Clang version'
    required: true
    default: 'r487747c'
    type: string
   extra_build_cmd:
    description: 'Extra build commands'
    required: true
    default: 'CC=clang'
   add_kernelsu:
    description: 'Add KernelSU'
    required: false
    type: choice
    options:
    - 
    - Stable
    - Dev
   need_arm32:
    description: 'CROSS_COMPILE_ARM32'
    required: true
    default: 'false'
    type: choice
    options:
    - true
    - false

jobs:
 build_kernel:
  runs-on: ubuntu-latest
  steps:
   - uses: actions/checkout@v3
   - name: Setup
     run: |
      echo "TIME=$(TZ=Asia/Taipei date "+%y%m%d%H%M")" >> $GITHUB_ENV
      sudo apt update && sudo apt upgrade -y
      sudo apt install git ccache automake flex lzop bison gperf build-essential zip curl zlib1g-dev g++-multilib libxml2-utils bzip2 libbz2-dev libbz2-1.0 libghc-bzlib-dev squashfs-tools pngcrush schedtool dpkg-dev liblz4-tool make optipng maven libssl-dev pwgen libswitch-perl policycoreutils minicom libxml-sax-base-perl libxml-simple-perl bc libc6-dev-i386 lib32ncurses5-dev libx11-dev lib32z-dev libgl1-mesa-dev xsltproc unzip device-tree-compiler python2 python3
      sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-12 100
      sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-12 100
      mkdir -p $GITHUB_WORKSPACE/build
            
   - name: Download AOSP GCC
     if: inputs.gcc_var == 'AOSP GCC'
     run: |
      cd $GITHUB_WORKSPACE/build
      mkdir gcc
      wget https://android.googlesource.com/platform/prebuilts/gcc/linux-x86/aarch64/aarch64-linux-android-4.9/+archive/0a0604336d4d1067aa1aaef8d3779b31fcee841d.tar.gz
      tar -zxvf 0a0604336d4d1067aa1aaef8d3779b31fcee841d.tar.gz -C gcc
      mkdir gcc32
      wget https://android.googlesource.com/platform/prebuilts/gcc/linux-x86/arm/arm-linux-androideabi-4.9/+archive/4d16d93f49c2b5ecdd0f12c38d194835dd595603.tar.gz
      tar -zxvf 4d16d93f49c2b5ecdd0f12c38d194835dd595603.tar.gz -C gcc32
      echo "TARGET=aarch64-linux-android-" >> $GITHUB_ENV
      echo "TARGET32=arm-linux-android-" >> $GITHUB_ENV
      
   - name: Download Eva GCC
     if: inputs.gcc_var == 'Eva GCC'
     run: |
      cd $GITHUB_WORKSPACE/build
      wget https://github.com/mvaisakh/gcc-arm64/archive/gcc-master.zip
      unzip gcc-master.zip && mv gcc-arm64-gcc-master gcc
      rm -rf gcc-master.zip
      wget https://github.com/mvaisakh/gcc-arm/archive/gcc-master.zip
      unzip gcc-master.zip && mv gcc-arm-gcc-master gcc32
      rm -rf gcc-master.zip
      echo "TARGET=aarch64-elf-" >> $GITHUB_ENV
      echo "TARGET32=arm-eabi-" >> $GITHUB_ENV
      
   - name: Download Clang
     run: |
      cd $GITHUB_WORKSPACE/build
      mkdir clang
      wget https://android.googlesource.com/platform/prebuilts/clang/host/linux-x86/+archive/refs/heads/master/clang-${{ inputs.clang_ver }}.tar.gz
      tar -zxvf clang-${{ inputs.clang_ver }}.tar.gz -C clang
      
   - name: Download Kernel
     run: |
      cd $GITHUB_WORKSPACE/build
      git clone -b ${{ inputs.branch }} ${{ inputs.kernel_url }} kernel
      
   - name: Add KernelSU (Stable)
     if: inputs.add_kernelsu == 'Stable'
     run: |
      cd $GITHUB_WORKSPACE/build/kernel
      curl -LSs "https://raw.githubusercontent.com/tiann/KernelSU/main/kernel/setup.sh" | bash -
      
   - name: Add KernelSU (Dev)
     if: inputs.add_kernelsu == 'Dev'
     run: |
      cd $GITHUB_WORKSPACE/build/kernel
      curl -LSs "https://raw.githubusercontent.com/tiann/KernelSU/main/kernel/setup.sh" | bash -s main
      
   - name: Build Kernel
     if: inputs.need_arm32 == 'false'
     run: |
      cd $GITHUB_WORKSPACE/build/kernel
      export PATH=$GITHUB_WORKSPACE/build/clang/bin:$GITHUB_WORKSPACE/build/gcc/bin:$GITHUB_WORKSPACE/build/gcc32/bin:$PATH
      make clean && make mrproper
      make -j$(nproc --all) 0=out ARCH=arm64 ${{ inputs.extra_build_cmd }} CLANG_TRIPLE=aarch64-linux-gnu- CROSS_COMPILE=$GITHUB_WORKSPACE/build/gcc/bin/${{ env.TARGET }} ${{ inputs.config }}
      make -j$(nproc --all) 0=out ARCH=arm64 ${{ inputs.extra_build_cmd }} CLANG_TRIPLE=aarch64-linux-gnu- CROSS_COMPILE=$GITHUB_WORKSPACE/build/gcc/bin/${{ env.TARGET }}
      
   - name: Build Kernel (Method 2)
     if: inputs.need_arm32 == 'true'
     run: |
      cd $GITHUB_WORKSPACE/build/kernel
      export PATH=$GITHUB_WORKSPACE/build/clang/bin:$GITHUB_WORKSPACE/build/gcc/bin:$GITHUB_WORKSPACE/build/gcc32/bin:$PATH
      make clean && make mrproper
      make -j$(nproc --all) 0=out ARCH=arm64 ${{ inputs.extra_build_cmd }} CLANG_TRIPLE=aarch64-linux-gnu- CROSS_COMPILE=$GITHUB_WORKSPACE/build/gcc/bin/{{ env.TARGET }} CROSS_COMPILE_ARM32=$GITHUB_WORKSPACE/build/gcc32/bin/{{ env.TARGET32 }} ${{ inputs.config }}
      make -j$(nproc --all) 0=out ARCH=arm64 ${{ inputs.extra_build_cmd }} CLANG_TRIPLE=aarch64-linux-gnu- CROSS_COMPILE=$GITHUB_WORKSPACE/build/gcc/bin/{{ env.TARGET }} CROSS_COMPILE_ARM32=$GITHUB_WORKSPACE/build/gcc32/bin/{{ env.TARGET32 }}
      
   - name: Make Anykernel3
     run: |
      cd $GITHUB_WORKSPACE/build
      git clone https://github.com/osm0sis/AnyKernel3
      sed -i 's/do.devicecheck=1/do.devicecheck=0/g' AnyKernel3/anykernel.sh
      sed -i 's!block=/dev/block/platform/omap/omap_hsmmc.0/by-name/boot;!block=auto;!g' AnyKernel3/anykernel.sh
      sed -i 's/is_slot_device=0;/is_slot_device=auto;/g' AnyKernel3/anykernel.sh
      cp kernel/arch/arm64/boot/${{ inputs.boot_format }} AnyKernel3/
      cp kernel/arch/arm64/boot/dtbo.img AnyKernel3/
      rm -rf AnyKernel3/.git* AnyKernel3/README.md
      
   - name: Upload AnyKernel3
     uses: actions/upload-artifact@v3
     with:
       name: AnyKernel3-${{ env.TIME }}
       path: build/AnyKernel3/
